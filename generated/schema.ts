// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bet", id.toString(), this);
  }

  static load(id: string): Bet | null {
    return store.get("Bet", id) as Bet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): string | null {
    let value = this.get("player");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set player(value: string | null) {
    if (value === null) {
      this.unset("player");
    } else {
      this.set("player", Value.fromString(value as string));
    }
  }

  get playernumber(): BigInt | null {
    let value = this.get("playernumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set playernumber(value: BigInt | null) {
    if (value === null) {
      this.unset("playernumber");
    } else {
      this.set("playernumber", Value.fromBigInt(value as BigInt));
    }
  }

  get randomqueryid(): BigInt | null {
    let value = this.get("randomqueryid");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set randomqueryid(value: BigInt | null) {
    if (value === null) {
      this.unset("randomqueryid");
    } else {
      this.set("randomqueryid", Value.fromBigInt(value as BigInt));
    }
  }

  get betvalue(): BigInt | null {
    let value = this.get("betvalue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set betvalue(value: BigInt | null) {
    if (value === null) {
      this.unset("betvalue");
    } else {
      this.set("betvalue", Value.fromBigInt(value as BigInt));
    }
  }

  get profitvalue(): BigInt | null {
    let value = this.get("profitvalue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set profitvalue(value: BigInt | null) {
    if (value === null) {
      this.unset("profitvalue");
    } else {
      this.set("profitvalue", Value.fromBigInt(value as BigInt));
    }
  }

  get rewardvalue(): BigInt | null {
    let value = this.get("rewardvalue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardvalue(value: BigInt | null) {
    if (value === null) {
      this.unset("rewardvalue");
    } else {
      this.set("rewardvalue", Value.fromBigInt(value as BigInt));
    }
  }

  get diceresult(): BigInt | null {
    let value = this.get("diceresult");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set diceresult(value: BigInt | null) {
    if (value === null) {
      this.unset("diceresult");
    } else {
      this.set("diceresult", Value.fromBigInt(value as BigInt));
    }
  }

  get proof(): Bytes | null {
    let value = this.get("proof");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proof(value: Bytes | null) {
    if (value === null) {
      this.unset("proof");
    } else {
      this.set("proof", Value.fromBytes(value as Bytes));
    }
  }

  get Won(): boolean {
    let value = this.get("Won");
    return value.toBoolean();
  }

  set Won(value: boolean) {
    this.set("Won", Value.fromBoolean(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Player entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Player entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Player", id.toString(), this);
  }

  static load(id: string): Player | null {
    return store.get("Player", id) as Player | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bets(): Array<string> | null {
    let value = this.get("bets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bets(value: Array<string> | null) {
    if (value === null) {
      this.unset("bets");
    } else {
      this.set("bets", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Statistic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Statistic entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Statistic entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Statistic", id.toString(), this);
  }

  static load(id: string): Statistic | null {
    return store.get("Statistic", id) as Statistic | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bets(): BigInt | null {
    let value = this.get("bets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bets(value: BigInt | null) {
    if (value === null) {
      this.unset("bets");
    } else {
      this.set("bets", Value.fromBigInt(value as BigInt));
    }
  }

  get wons(): BigInt | null {
    let value = this.get("wons");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set wons(value: BigInt | null) {
    if (value === null) {
      this.unset("wons");
    } else {
      this.set("wons", Value.fromBigInt(value as BigInt));
    }
  }

  get looses(): BigInt | null {
    let value = this.get("looses");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set looses(value: BigInt | null) {
    if (value === null) {
      this.unset("looses");
    } else {
      this.set("looses", Value.fromBigInt(value as BigInt));
    }
  }
}
